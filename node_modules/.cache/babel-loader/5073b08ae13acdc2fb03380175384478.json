{"ast":null,"code":"import React, { useState, useEffect } from 'react';\nimport axios from 'axios'; // Custom hook for performing get requests\n\nexport const useFetch = (searchMethod, searchValue) => {\n  const getAll = 'http://localhost:8080/api/students';\n  const getbyId = 'http://localhost:8080/api/students/' + searchValue;\n  let url = null; // set our states for inital empty data array of students, and loading boolean\n\n  switch (searchMethod) {\n    case 'getbyId':\n      url + getbyId;\n      break;\n\n    case 'getAll':\n      url + getAll;\n      break;\n\n    default:\n      url = null;\n  }\n\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true); // useEffect contains our Axios API cal, with error handling and finally block\n\n  useEffect(() => {\n    const fetchData = async function () {\n      try {\n        setLoading(true);\n        const response = await axios.get(url);\n\n        if (response.status == 200) {\n          setData(response.data);\n        }\n      } catch (error) {\n        throw error;\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData(); // the [] contains states that we check for change,if one state in the [] changes the effect executes\n  }, [url]);\n  return {\n    loading,\n    data\n  };\n};","map":{"version":3,"sources":["C:/React Workspace/students/src/service/StudentService.jsx"],"names":["React","useState","useEffect","axios","useFetch","searchMethod","searchValue","getAll","getbyId","url","data","setData","loading","setLoading","fetchData","response","get","status","error"],"mappings":"AAAA,OAAOA,KAAP,IAAcC,QAAd,EAAuBC,SAAvB,QAAuC,OAAvC;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;;AAEA,OAAO,MAAMC,QAAQ,GAAC,CAACC,YAAD,EAAcC,WAAd,KAA4B;AAE9C,QAAMC,MAAM,GAAC,oCAAb;AACA,QAAMC,OAAO,GAAC,wCAAuCF,WAArD;AACA,MAAIG,GAAG,GAAC,IAAR,CAJ8C,CAM9C;;AACA,UAAOJ,YAAP;AACI,SAAK,SAAL;AAAgBI,MAAAA,GAAG,GAAGD,OAAN;AAChB;;AACA,SAAK,QAAL;AAAeC,MAAAA,GAAG,GAAGF,MAAN;AACf;;AACA;AAASE,MAAAA,GAAG,GAAC,IAAJ;AALb;;AAQA,QAAK,CAACC,IAAD,EAAMC,OAAN,IAAiBV,QAAQ,CAAC,EAAD,CAA9B;AACA,QAAK,CAACW,OAAD,EAASC,UAAT,IAAsBZ,QAAQ,CAAC,IAAD,CAAnC,CAhB8C,CAiB9C;;AACAC,EAAAA,SAAS,CAAC,MAAI;AACV,UAAMY,SAAS,GAAE,kBAAgB;AAC7B,UAAG;AACCD,QAAAA,UAAU,CAAC,IAAD,CAAV;AACA,cAAME,QAAQ,GAAG,MAAMZ,KAAK,CAACa,GAAN,CAAUP,GAAV,CAAvB;;AACA,YAAGM,QAAQ,CAACE,MAAT,IAAiB,GAApB,EAAwB;AACpBN,UAAAA,OAAO,CAACI,QAAQ,CAACL,IAAV,CAAP;AACH;AACJ,OAND,CAME,OAAMQ,KAAN,EAAY;AACV,cAAMA,KAAN;AACH,OARD,SAQS;AACLL,QAAAA,UAAU,CAAC,KAAD,CAAV;AACH;AACJ,KAZD;;AAaAC,IAAAA,SAAS,GAdC,CAeV;AACD,GAhBM,EAgBJ,CAACL,GAAD,CAhBI,CAAT;AAiBE,SAAM;AAACG,IAAAA,OAAD;AAASF,IAAAA;AAAT,GAAN;AACL,CApCM","sourcesContent":["import React,{useState,useEffect} from 'react'\r\nimport axios from 'axios'\r\n\r\n// Custom hook for performing get requests\r\n\r\nexport const useFetch=(searchMethod,searchValue)=>{\r\n\r\n    const getAll='http://localhost:8080/api/students';\r\n    const getbyId='http://localhost:8080/api/students/' +searchValue;\r\n    let url=null;\r\n\r\n    // set our states for inital empty data array of students, and loading boolean\r\n    switch(searchMethod){\r\n        case 'getbyId': url + getbyId;\r\n        break;\r\n        case 'getAll': url + getAll;\r\n        break;\r\n        default: url=null;\r\n    }\r\n\r\n    const[data,setData] = useState([]);\r\n    const[loading,setLoading]= useState(true);\r\n    // useEffect contains our Axios API cal, with error handling and finally block\r\n    useEffect(()=>{\r\n        const fetchData= async function(){\r\n            try{\r\n                setLoading(true);\r\n                const response = await axios.get(url);\r\n                if(response.status==200){\r\n                    setData(response.data);\r\n                }\r\n            } catch(error){\r\n                throw error;\r\n            } finally{\r\n                setLoading(false);\r\n            }\r\n        };\r\n        fetchData();\r\n        // the [] contains states that we check for change,if one state in the [] changes the effect executes\r\n      }, [url])\r\n      return{loading,data};\r\n};"]},"metadata":{},"sourceType":"module"}